# Enums
enum SortOrder {
  asc
  desc
}

# Documents
type Area {
  id: ID!
  name: String!
  nameSpanish: String!
  notes: String

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type Builder {
  id: ID!
  name: String!
  primaryPhone: String
  primaryEmail: String
  companyId: String!
  notes: String

  company: Company!

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type Community {
  id: ID!
  name: String!
  companyId: String!
  notes: String

  company: Company!

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type Company {
  id: ID!
  name: String!
  primaryAddress: String
  primaryEmail: String
  primaryPhone: String
  notes: String

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type Contractor {
  id: ID!
  name: String!
  primaryPhone: String!
  notes: String

  jobsLegacy: [JobLegacy!]!

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type LineItemLegacy {
  id: ID!
  orderNumber: String!
  supplierId: String!
  jobId: String!

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  legacy: Boolean!
}

type Reporter {
  id: ID!
  name: String!
  primaryPhone: String!
  primaryEmail: String
  notes: String

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type Scope {
  id: ID!
  name: String!
  nameSpanish: String!
  description: String
  notes: String

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type Supplier {
  id: ID!
  name: String!
  primaryPhone: String
  notes: String

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

type JobLegacy {
  id: ID!
  name: String!
  active: Boolean!
  inProgress: Boolean!
  isImportant: Boolean!
  areaId: String
  builderId: String
  communityId: String
  contractorId: String
  reporterId: String
  scopeId: String
  completedDate: String
  startDate: String
  notes: String

  area: Area
  builder: Builder
  community: Community
  contractor: Contractor
  reporter: Reporter
  scope: Scope
  lineItems: [LineItemLegacy!]!

  updatedBy: String!
  createdBy: String!
  createdTime: String!
  updatedTime: String!
  archived: Boolean!
  legacy: Boolean!
}

# Inputs
input CreateAreaInput {
  name: String!
  nameSpanish: String!
  notes: String
}

input CreateBuilderInput {
  name: String!
  primaryPhone: String!
  primaryEmail: String
  companyId: String!
  notes: String
}

input CreateCommunityInput {
  name: String!
  companyId: String!
  notes: String
}

input CreateCompanyInput {
  name: String!
  primaryAddress: String
  primaryEmail: String
  primaryPhone: String
  notes: String
}

input CreateContractorInput {
  name: String!
  primaryPhone: String!
  notes: String
}

input CreateReporterInput {
  name: String!
  primaryPhone: String!
  primaryEmail: String
  notes: String
}

input CreateScopeInput {
  name: String!
  nameSpanish: String!
  description: String
  notes: String
}

input CreateSupplierInput {
  name: String!
  primaryPhone: String
  notes: String
}

input LineItemLegacyInput {
  orderNumber: String!
  supplierId: String!
}

input CreateJobLegacyInput {
  name: String!
  areaId: String
  builderId: String
  communityId: String
  contractorId: String
  reporterId: String
  scopeId: String
  startDate: String
  notes: String
  lineItems: [LineItemLegacyInput!]!
}

input PaginationOptions {
  page: Int!
  pageSize: Int!
}

input SortingOptions {
  field: String!
  order: SortOrder!
}

# Responses
type MessageResponse {
  message: String!
}

type MetaResponse {
  page: Int
  pageSize: Int
  sortField: String
  sortOrder: SortOrder
  totalCount: Int!
}

# Query Responses
type AreasResponse {
  data: [Area!]!
  meta: MetaResponse!
}

type BuildersResponse {
  data: [Builder!]!
  meta: MetaResponse!
}

type CommunitiesResponse {
  data: [Community!]!
  meta: MetaResponse!
}

type CompaniesResponse {
  data: [Company!]!
  meta: MetaResponse!
}

type ContractorsResponse {
  data: [Contractor!]!
  meta: MetaResponse!
}

type ReportersResponse {
  data: [Reporter!]!
  meta: MetaResponse!
}

type ScopesResponse {
  data: [Scope!]!
  meta: MetaResponse!
}

type SuppliersResponse {
  data: [Supplier!]!
  meta: MetaResponse!
}

type AssignedContractorsResponse {
  data: [Contractor!]!
  meta: MetaResponse!
}

type UnassignedJobsResponse {
  data: [JobLegacy!]!
  meta: MetaResponse!
}

# Archive Mutation Responses
type ArchiveAreaResponse {
  data: Area!
  message: String!
}

type ArchiveBuilderResponse {
  data: Builder!
  message: String!
}

type ArchiveCommunityResponse {
  data: Community!
  message: String!
}

type ArchiveCompanyResponse {
  data: Company!
  message: String!
}

type ArchiveContractorResponse {
  data: Contractor!
  message: String!
}

type ArchiveJobLegacyResponse {
  data: JobLegacy!
  message: String!
}

type ArchiveReporterResponse {
  data: Reporter!
  message: String!
}

type ArchiveScopeResponse {
  data: Scope!
  message: String!
}

type ArchiveSupplierResponse {
  data: Supplier!
  message: String!
}

# Create Mutation Responses
type CreateAreaResponse {
  data: Area!
  message: String!
}

type CreateBuilderResponse {
  data: Builder!
  message: String!
}

type CreateCommunityResponse {
  data: Community!
  message: String!
}

type CreateCompanyResponse {
  data: Company!
  message: String!
}

type CreateContractorResponse {
  data: Contractor!
  message: String!
}

type CreateJobLegacyResponse {
  data: JobLegacy!
  message: String!
}

type CreateReporterResponse {
  data: Reporter!
  message: String!
}

type CreateScopeResponse {
  data: Scope!
  message: String!
}

type CreateSupplierResponse {
  data: Supplier!
  message: String!
}

type DeleteResponse {
  message: String!
}

# Queries
type Query {
  # Query by id
  areaById(id: ID!): Area
  builderById(id: ID!): Builder
  communityById(id: ID!): Community
  companyById(id: ID!): Company
  contractorById(id: ID!): Contractor
  reporterById(id: ID!): Reporter
  scopeById(id: ID!): Scope
  supplierById(id: ID!): Supplier
  jobLegacyById(id: ID!): JobLegacy

  # Query paginated and sorted
  areas(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): AreasResponse!
  builders(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): BuildersResponse!
  communities(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): CommunitiesResponse!
  companies(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): CompaniesResponse!
  contractors(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): ContractorsResponse!
  reporters(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): ReportersResponse!
  scopes(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): ScopesResponse!
  suppliers(pagination: PaginationOptions, sorting: SortingOptions, archived: Boolean): SuppliersResponse!

  # Dashboard
  assignedContractors(pagination: PaginationOptions, sorting: SortingOptions): AssignedContractorsResponse!
  unassignedJobs(pagination: PaginationOptions, sorting: SortingOptions): UnassignedJobsResponse!
}

# Mutations
type Mutation {
  # Archive
  archiveArea(id: ID!): ArchiveAreaResponse!
  archiveBuilder(id: ID!): ArchiveBuilderResponse!
  archiveCommunity(id: ID!): ArchiveCommunityResponse!
  archiveCompany(id: ID!): ArchiveCompanyResponse!
  archiveContractor(id: ID!): ArchiveContractorResponse!
  archiveJobLegacy(id: ID!): ArchiveJobLegacyResponse!
  archiveReporter(id: ID!): ArchiveReporterResponse!
  archiveScope(id: ID!): ArchiveScopeResponse!
  archiveSupplier(id: ID!): ArchiveSupplierResponse!

  # Create
  createArea(data: CreateAreaInput!): CreateAreaResponse!
  createBuilder(data: CreateBuilderInput!): CreateBuilderResponse!
  createCommunity(data: CreateCommunityInput!): CreateCommunityResponse!
  createCompany(data: CreateCompanyInput!): CreateCompanyResponse!
  createContractor(data: CreateContractorInput!): CreateContractorResponse!
  createJobLegacy(data: CreateJobLegacyInput!): CreateJobLegacyResponse!
  createReporter(data: CreateReporterInput!): CreateReporterResponse!
  createScope(data: CreateScopeInput!): CreateScopeResponse!
  createSupplier(data: CreateSupplierInput!): CreateSupplierResponse!

  # Delete
  deleteLineItemLegacy(id: ID!): DeleteResponse!
}
